name: CI/CD Workflow
run-name: ${{github.actor}} initiated CI/CD Pipeline 

  # Workflow triggers
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

  # Environment Variables
env:
  PACKAGE_REGISTRY_TO_USE: hannehue
  DOCKER_IMAGE_PUBLISHER: cpp_publisher 
  DOCKER_IMAGE_SUBSCRIBER: python_subscriber 
  DOCKER_IMAGE_FAULT: fault_subscriber 
  PROJECT_NAME: BeerButtler
  GROUP_NUMBER: Group09 #I.e  Group02
  # SSH_PRIVATE_KEY: ${{secrets.SSH_PRIVATE_KEY}}

jobs:
  # Create artifact of repository source code to use for consistensy accross all jobs
  clone-repository:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.0.0
      - name: Upload Repository artifacts
        uses: actions/upload-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Upload Requirements
        uses: actions/upload-artifact@v3
        with:
          name: deployment-artifact
          path: |
            ./src/docker-compose.prod.yml
            ./src/mosquitto.conf
  
  # Job for compiling applicaitons and uploading as an artifact
  build-application:
    runs-on: ubuntu-latest
    needs: clone-repository
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      # Your logic for building the applicaiton, language dependent
      - name: Build application
        run:  |
          echo "building app"
      # Upload compiled artifact
      - name: Upload Build artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: ./src # Replace with path to your compiled artifact
          

  build-push-cpp:
    runs-on: ubuntu-latest
    needs: [build-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          # Authenticate with GitHub Container Registry, could be changed to use DockerHub
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Transform github.actor to lowercase
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      # Building and pushing application image go to: GitHub -> Profile -> Packages 
      - name: Build & Push image
        uses: docker/build-push-action@v3
        with:
          context: ./src/publisher #Path to your dockerfile
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_PUBLISHER }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_PUBLISHER }}:latest

  build-push-python:
    runs-on: ubuntu-latest
    needs: [build-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          # Authenticate with GitHub Container Registry, could be changed to use DockerHub
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Transform github.actor to lowercase
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      # Building and pushing application image go to: GitHub -> Profile -> Packages 
      - name: Build & Push image
        uses: docker/build-push-action@v3latest
        with:
          context: ./src/subscriber #Path to your dockerfile
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_SUBSCRIBER }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_SUBSCRIBER }}:latest

  build-push-fault:
    runs-on: ubuntu-latest
    needs: [build-application]
    permissions:
      packages: write
      contents: read
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v3
        with:
          name: repository-artifacts
          path: .
      - name: Login to GitHub Package Registry
        uses: docker/login-action@v2
        with:
          # Authenticate with GitHub Container Registry, could be changed to use DockerHub
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Transform github.actor to lowercase
      - name: Transform username to lowercase
        run: echo "OWNER_LOWER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      # Building and pushing application image go to: GitHub -> Profile -> Packages 
      - name: Build & Push image
        uses: docker/build-push-action@v3latest
        with:
          context: ./src/FaultHandler #Path to your dockerfile
          push: true
          tags: ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_FAULT }}:1.0-${{ github.sha }},ghcr.io/${{ env.OWNER_LOWER }}/${{ env.DOCKER_IMAGE_FAULT }}:latest



  # # Job for deploying the application, could be the logic for deploying to your VM  
  # deploy-application:
  #   runs-on: ubuntu-latest
  #   needs: [build-push-cpp, build-push-python]
  #   continue-on-error: true
  #   steps:
  #     - name: Logic for deploying application
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: deployment-artifact
  #         path: ./src 